// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ProxyApi.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class ProxyTemplate : ProxyTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n(function (angular) {\r\n    \'use strict\';\r\n\r\n    angular.module(\'api-proxies\', [" +
                    "]);\r\n}(angular));\r\n\r\n(function(angular) {\r\n\t\"use strict\";\r\n\r\n\tfunction getQueryS" +
                    "tring(params, queryString) {\r\n\t\tqueryString = queryString || \"\";\r\n\t\tfor(var prop" +
                    " in params) {\r\n\t\t\tif (params.hasOwnProperty(prop)) {\r\n\t\t\t\tvar val = getArgValue(" +
                    "params[prop]);\r\n\t\t\t\tif (val === null) continue;\r\n\r\n\t\t\t\tif (\"\" + val === \"[object" +
                    " Object]\") {\r\n\t\t\t\t\tqueryString = getQueryString(params[prop], queryString);\r\n\t\t\t" +
                    "\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (queryString.length) {\r\n\t\t\t\t\tqueryString += \"&\";\r\n\t" +
                    "\t\t\t} else {\r\n\t\t\t\t\tqueryString += \"?\";\r\n\t\t\t\t}\r\n\t\t\t\tqueryString = queryString + pr" +
                    "op + \"=\" + encodeURIComponent(val);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn queryString;\r\n\t}\r\n\r\n\tfu" +
                    "nction getArgValue(val) {\r\n\t\tif (val === undefined || val === null) return null;" +
                    "\r\n\t\treturn val;\r\n\t}\r\n\r\n\tfunction defaultAntiForgeryTokenAccessor() {\r\n\t\treturn $" +
                    "(\"input[name=__RequestVerificationToken]\").val();\r\n\t};\r\n\r\n\tangular\r\n        .mod" +
                    "ule(\'api-proxies\')\r\n\t\t.factory(\'api\', [ \'$http\', \r\n            function($http) {" +
                    "\r\n\r\n\t\t\t\t\tfunction invoke(url, type, urlParams, body) {\r\n\t\t\t\t\t\turl += getQueryStr" +
                    "ing(urlParams);\r\n\r\n\t\t\t\t\t\tvar request = angular.extend({}, this.defaultOptions, {" +
                    "\r\n\t\t\t\t\t\t\tmethod: type,\r\n\t\t\t\t\t\t\turl: url\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tif (body) {\r\n\t\t\t\t\t\t\t" +
                    "request.data = body;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.antiForgeryToken) {\r\n\t\t\t\t\t\t\tvar " +
                    "token = typeof this.antiForgeryToken === \'function\' ? this.antiForgeryToken() : " +
                    "this.antiForgeryToken;\r\n\t\t\t\t\t\t\tif (token) {\r\n\t\t\t\t\t\t\t\trequest.headers = request.h" +
                    "eaders || {};\r\n\t\t\t\t\t\t\t\trequest.headers[\"X-RequestVerificationToken\"] = token\r\n\t\t" +
                    "\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn $http(request);\r\n\t\t\t\t\t};\r\n\r\n            var api " +
                    "= {};\r\n\r\n\t/* Proxies */\r\n\r\n\t");
            
            #line 80 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 foreach(var definition in this.Definitions) { 
            
            #line default
            #line hidden
            this.Write("\tapi.");
            
            #line 81 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(definition.Name));
            
            #line default
            #line hidden
            this.Write(" = {\r\n\t\tdefaultOptions: {},\r\n\t\tantiForgeryToken: defaultAntiForgeryTokenAccessor," +
                    "\r\n");
            
            #line 84 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 foreach(var method in definition.ActionMethods) { 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 86 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"

	var allParameters = method.UrlParameters.AsEnumerable();
	if (method.BodyParameter != null) {
		allParameters = allParameters.Concat(new [] { method.BodyParameter });
	}

	var parameterList = string.Join(",", allParameters.Where(m => m != null)
							.OrderBy(m => m.Index)
							.Select(m => m.Name)
							.Concat(new [] { "additionalParameters" })
							.ToArray());

            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 98 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write(": function(");
            
            #line 98 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterList));
            
            #line default
            #line hidden
            this.Write(") {\r\n\t\treturn invoke.call(this, \"");
            
            #line 99 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Url));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 99 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Type.ToString().ToLower()));
            
            #line default
            #line hidden
            this.Write("\", \r\n\t\t\tangular.extend({},\r\n\t\t\t");
            
            #line 101 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 if (method.UrlParameters.Any()) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t{\r\n\t\t\t\t");
            
            #line 103 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 foreach (var parameter in method.UrlParameters) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t");
            
            #line 104 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write(": arguments[");
            
            #line 104 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Index));
            
            #line default
            #line hidden
            this.Write("],\r\n\t\t\t\t");
            
            #line 105 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t}, additionalParameters)\r\n\t\t\t");
            
            #line 107 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\tadditionalParameters)\r\n\t\t\t");
            
            #line 109 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 110 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 if (method.BodyParameter != null) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t, arguments[");
            
            #line 111 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.BodyParameter.Index));
            
            #line default
            #line hidden
            this.Write("]);\r\n\t\t");
            
            #line 112 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\t\t\t);\r\n\t\t");
            
            #line 114 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t},\r\n");
            
            #line 116 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t};\r\n\r\n\t");
            
            #line 119 "C:\Git\SdmProxyApi\ProxyApi\Templates\ProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        \r\n            return api;\r\n        }\r\n    ]);\r\n}(angular));");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class ProxyTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
